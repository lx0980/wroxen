# (c) @TheLx0980

import asyncio
from pyrogram import Client, filters
from wroxen.vars import ADMIN_IDS
from wroxen.database import Database, AuthorizedChannels

import logging
logger = logging.getLogger(__name__)

db = Database()
auth = AuthorizedChannels

@Client.on_message(filters.command("Channel_status") & filters.channel)
async def channel_status_command(bot, message):
    channel_id = str(message.chat.id)
    auto_caption = db.get_caption(channel_id)
    forward_settings = db.get_forward_settings(channel_id)
    if forward_settings:
        from_chat = forward_settings["from_chat"]
        to_chat = forward_settings["to_chat"]
        old_username, new_username, caption = db.get_replace_data(channel_id)
        await bot.send_message(message.chat.id, f"New Username: {new_username} üñêÔ∏è")
        channel_status_text = f"""
From Channel: {from_chat}
To chat: {to_chat}
        
Caption: {caption}
        
Replace TEXT:
{old_username} To {new_username}

Channel Auto Caption:
{auto_caption}

Channel name: {message.chat.title}"""

        await bot.send_message(message.chat.id, channel_status_text)
    else:
        await bot.send_message(message.chat.id, f"‡§ö‡•à‡§®‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ó‡•ç‡§∞‡•á‡§∑‡§£ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç {channel_id}")


        

@Client.on_message(filters.command("add_authorised_chat") & filters.private)
async def add_authorised_chat_command(bot, message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‡§Ü‡§™ ‡§á‡§∏ ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç")
        return

    command_parts = message.text.split(" ", 1)

    if len(command_parts) != 2:
        await message.reply("‡§Ö‡§µ‡•à‡§ß ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç `/add_authorised_chat {channel_id}`.")
        return

    channel_id = command_parts[1]

    if not channel_id.startswith("-100"):
        channel_id = "-100" + channel_id

    try:
        chat = await bot.get_chat(int(channel_id))
    except Exception as e:
        return await message.reply("‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•á ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç ‡§è‡§°‡§Æ‡§ø‡§® ‡§¨‡§®‡§æ‡§è‡§Ç‡•§")

    channel_id = str(chat.id)
    authorized_chat = auth.get_authorized_channels(channel_id)

    if channel_id in authorized_chat:
        await message.reply("‡§ö‡•à‡§®‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§π‡•à‡•§")
        return

    try:
        auth.add_authorized_channel(channel_id)
        await message.reply(f"Channel ID {channel_id} <b>{chat.title}</b> ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ‡•§")
    except Exception as e:
        await message.reply("‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§ö‡•à‡§®‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§ú‡•ã‡§°‡§º‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§")



@Client.on_message(filters.command("delete_authorised_chat") & filters.private)
async def delete_authorised_chat_command(bot, message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‡§Ü‡§™ ‡§á‡§∏ ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§")
        return

    command_parts = message.text.split(" ", 1)

    if len(command_parts) != 2:
        await message.reply("‡§Ö‡§µ‡•à‡§ß ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç `/delete_authorised_chat {channel_id}`.")
        return

    channel_id = command_parts[1]

    if not channel_id.startswith("-100"):
        channel_id = "-100" + channel_id

    channel_ids = auth.get_authorized_channels(channel_id)

    if channel_id not in channel_ids:
        await message.reply("‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ö‡•à‡§®‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§")
        return

    try:
        auth.delete_authorized_channel(channel_id)
        await message.reply(f"{channel_id} ‡§ï‡•ã ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§∏‡•Ç‡§ö‡•Ä ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
    except Exception as e:
        await message.reply("‡§™‡•ç‡§∞‡§æ‡§ß‡§ø‡§ï‡•É‡§§ ‡§∏‡•Ç‡§ö‡•Ä ‡§∏‡•á ‡§ö‡•à‡§®‡§≤ ‡§Ü‡§à‡§°‡•Ä ‡§®‡§ø‡§ï‡§æ‡§≤‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§")


@Client.on_message(filters.command("delete_all_authorised_chats") & filters.private)
async def delete_all_authorised_chats_command(bot, message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‡§Ü‡§™ ‡§á‡§∏ ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç")
        return

    try:
        deleted_count = auth.delete_all_authorized_chats()
        await message.reply(f"{deleted_count} ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§ö‡•à‡§ü ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡§Ç‡•§")
    except Exception as e:
        await message.reply("‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§ö‡•à‡§ü ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à")
        
        
        
@Client.on_message(filters.command("check_authorised_chats") & filters.private)
async def check_authorised_command(bot, message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‡§Ü‡§™ ‡§á‡§∏ ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç")
        return

    try:
        authorised_chats = AuthorizedChannels.get_authorized_chat()
        if not authorised_chats:
            await message.reply("‡§ï‡•ã‡§à ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§ö‡•à‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§")
        else:
            reply_message = "‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§ö‡•à‡§ü:\n"
            for chat_id in authorised_chats:
                reply_message += f"- {chat_id}\n"
            await message.reply(reply_message)
    except Exception as e:
        await message.reply("An error occurred while checking the authorized chats.")


@Client.on_message(filters.command("cleardb"))
async def clear_db_command(bot, message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§")
        return
    
    command_msg = message.text.split(" ", 1)
    
    if len(command_msg) < 2:
        await message.reply("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™: ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\n <code>/cleardb all</code>")
        return
    
    clear_type = command_msg[1].lower()
    if clear_type == "all":
        delete_counts = db.clear_all_db()
    
        reply_text = f"""
‡§ï‡•Å‡§≤ ‡§Æ‡§ø‡§ü‡§æ‡§è ‡§ó‡§è ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®:

‡§ë‡§ü‡•ã ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° = {delete_counts['a1']}
‡§Ö‡§ß‡§ø‡§ï‡•É‡§§ ‡§ö‡•à‡§®‡§≤ = {delete_counts['a2']}
‡§ë‡§ü‡•ã ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡•à‡§™‡•ç‡§∂‡§® = {delete_counts['a3']}
‡§ë‡§ü‡•ã ‡§ï‡•à‡§™‡•ç‡§∂‡§® = {delete_counts['a4']}

‡§ï‡•Å‡§≤: {delete_counts['a5']}
        """
        await message.reply(reply_text)
    else:
        await message.reply("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™: ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\n <code>/cleardb all</code>")


        
