# (c) TheLx0980

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram import filters, Client, enums
from wroxen.wroxen import Wroxen
from wroxen.text import ChatMSG
import logging

import logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)


@Wroxen.on_message(filters.command("start") & filters.private & filters.incoming)
async def start(client, message):
    await message.reply(
        text=ChatMSG.START_TXT.format(message.from_user.first_name),
        disable_web_page_preview=True,
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‡§Æ‡§¶‡§¶ ‚öô", callback_data = "help"),
                    InlineKeyboardButton("üîí ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã", callback_data = "close")
                ]
            ]
        ),
        quote=True
    )
    

@Wroxen.on_message(filters.command("help") & filters.private & filters.incoming)
async def about(client, message):
    await message.reply(
        text=ChatMSG.HELP_TXT,
        disable_web_page_preview=True,
        reply_markup = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üòä ‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç", callback_data = "about"),
                    InlineKeyboardButton("üîí ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã", callback_data = "close")
                ]
            ]
        ),
        quote=True
    )


@Client.on_callback_query()
async def callback_data(bot, update: CallbackQuery):

    query_data = update.data

    if query_data == "start":
        buttons = [[            
            InlineKeyboardButton('‡§Æ‡§¶‡§¶ ‚öô', callback_data="help"),
            InlineKeyboardButton("üîí ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã", callback_data = "close")
        ]]
    
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.START_TXT.format(update.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML,
            disable_web_page_preview=True
        )


    elif query_data == "help":
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á ‡§ú‡§æ‡§è ‚ö°', callback_data='start'),
            InlineKeyboardButton('‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç', callback_data='about')
        ],[
            InlineKeyboardButton('‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§ï‡•à‡§™‡•ç‡§∂‡§®', callback_data='caption')
        ],[
            InlineKeyboardButton('‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§°', callback_data='autoforward')
        ],[
            InlineKeyboardButton('‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ï‡•ç‡§≤‡•ã‡§®', callback_data='media_clone')
        ],[
            InlineKeyboardButton('‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ï‡•ç‡§≤‡•ã‡§®', callback_data='admin_command')
        ],[ 
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
    
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.HELP_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML,
            disable_web_page_preview=True
        )


    elif query_data == "about": 
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á ‚ö°', callback_data='start'),
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.ABOUT_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query_data == "caption": 
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á‚ö°', callback_data='help'),
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.CAPTION_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
  
    elif query_data == "autoforward": 
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á‚ö°', callback_data='help'),
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.AUTOFORWARD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query_data == "admin_command": 
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á‚ö°', callback_data='help'),
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.ADMIN_COMMAND_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query_data == "media_clone": 
        buttons = [[
            InlineKeyboardButton('‡§™‡•Ä‡§õ‡•á‚ö°', callback_data='help'),
            InlineKeyboardButton('‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç üîê', callback_data='close')
        ]]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await update.message.edit_text(
            ChatMSG.MEDIA_CLONE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )


    elif query_data == "close":
        await update.message.delete()
